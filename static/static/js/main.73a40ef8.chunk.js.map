{"version":3,"sources":["utils/request.js","utils/utils.js","App.js","serviceWorker.js","index.js"],"names":["service","axios","create","baseURL","document","location","origin","timeout","headers","transformRequest","data","header","startsWith","Qs","stringify","interceptors","response","use","msg","code","notification","error","message","console","log","formatTime","timestamp","fmt","date","Date","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","getDay","k","formatRoughTime","nowDate","setHours","this","App","state","loaded","newServerModal","serverList","lanInfo","runing","address","server","lastUpdateTimestamp","lanActionBreathe","lanActionBreatheAnimation","actioning","addLanServering","removeing","loadData","schedulerRefreshInfo","schedulerRefreshServers","setState","loadInfo","setTimeout","refreListData","request","url","method","newTimestamp","update_timestamp","oldTimestamp","difference","serverID","hide","loading","id","Promise","resolve","reject","host","name","className","gutter","xs","lg","bodyStyle","height","status","style","width","type","size","danger","disabled","onClick","e","disconnectLan","online","ping","MobileOutlined","fontSize","animation","x","onComplete","repeat","paused","LineOutlined","DeploymentUnitOutlined","block","map","v","key","flexShrink","flexGrow","version","utils","connectLan","deleteLanServe","title","visible","centered","footer","closable","labelCol","span","wrapperCol","layout","onFinish","a","addLanServe","Item","label","rules","required","marginBottom","margin","htmlType","React","Component","Boolean","window","hostname","match","moment","locale","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"6WAKMA,EAAUC,IAAMC,OAAO,CAC3BC,QAASC,SAASC,SAASC,OAE3BC,QAAS,KACTC,QAAS,CACP,eAAgB,qCAElBC,iBAAkB,CAAC,SAACC,EAAMC,GAExB,OADoBA,EAAO,gBACXC,WAAW,uBAClBF,EAEFG,IAAGC,UAAUJ,OAKxBV,EAAQe,aAAaC,SAASC,KAC5B,SAAAD,GAAa,IACHN,EAAwBM,EAAxBN,KAAcQ,EAAUF,EAAlBN,KAAQQ,IAStB,OAPkB,IAAdR,EAAKS,OACPC,IAAaC,MAAM,CACjBC,QAASJ,IAEXK,QAAQC,IAAIN,IAGPR,KAET,SAAAW,GAAU,IACAC,EAAsBD,EAAtBC,QAASN,EAAaK,EAAbL,SAIjB,OAHAI,IAAaC,MAAM,CACjBC,QAASA,IAEJ,CACLH,MAAO,EACPT,KAAI,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAUN,KAChBQ,IAAG,OAAEI,QAAF,IAAEA,IAAW,+BAMPtB,QChDA,GACbyB,WAIF,SAAoBC,EAAWC,GAC7B,IAAIC,EAAO,IAAIC,KAAiB,IAAZH,GAChBI,EAAI,CACN,KAAMF,EAAKG,WAAa,EACxB,KAAMH,EAAKI,UACX,KAAMJ,EAAKK,WAAa,KAAO,EAAI,GAAKL,EAAKK,WAAa,GAC1D,KAAML,EAAKK,WACX,KAAML,EAAKM,aACX,KAAMN,EAAKO,aACX,KAAMC,KAAKC,OAAOT,EAAKG,WAAa,GAAK,GACzC,EAAKH,EAAKU,mBAWR,OAAOC,KAAKZ,KACdA,EAAMA,EAAIa,QAAQC,OAAOC,IAAKd,EAAKe,cAAgB,IAAIC,OAAO,EAAIH,OAAOC,GAAGG,UAE1E,OAAON,KAAKZ,KACdA,EAAMA,EAAIa,QAAQC,OAAOC,IAAMD,OAAOC,GAAGG,OAAS,EAAMJ,OAAOC,GAAGG,OAAS,EAAI,eAAO,SAAO,IAbpF,CACT,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,SACL,EAAK,UAMmGjB,EAAKkB,SAAW,MAE1H,IAAK,IAAIC,KAAKjB,EACR,IAAIW,OAAO,IAAMM,EAAI,KAAKR,KAAKZ,KACjCA,EAAMA,EAAIa,QAAQC,OAAOC,GAA0B,IAArBD,OAAOC,GAAGG,OAAiBf,EAAEiB,IAAQ,KAAOjB,EAAEiB,IAAIH,QAAQ,GAAKd,EAAEiB,IAAIF,UAGvG,OAAOlB,GAnCPqB,gBAsCF,SAAyBtB,GACvB,IAAIE,EAAO,IAAIC,KAAiB,IAAZH,GAChBuB,EAAU,IAAIpB,KAClB,OAAID,EAAKsB,SAAS,EAAG,EAAG,EAAG,KAAOD,EAAQC,SAAS,EAAG,EAAG,EAAG,GACnDC,KAAK1B,WAAWC,EAAW,SAG3ByB,KAAK1B,WAAWC,EAAW,gB,sICyRvB0B,E,4MAtTbC,MAAQ,CACNC,QAAQ,EACRC,gBAAgB,EAChBC,WAAY,GACZC,QAAS,CACPC,QAAQ,EACRC,QAAS,GACT,iBAAoB,EACpBC,OAAQ,MAEVC,oBAAqB,EACrBC,kBAAkB,EAClBC,2BAA2B,EAC3BC,WAAW,EACXC,iBAAiB,G,EAGnBvD,KAAO,CACLwD,WAAW,G,kEAKXf,KAAKgB,a,2JAIChB,KAAKiB,uB,uBACLjB,KAAKkB,0B,OACXlB,KAAKmB,SAAS,CAAEhB,QAAQ,I,wRAIlBH,KAAKoB,W,OACXC,YAAW,kBAAM,EAAKJ,yBAAwB,K,2RAGxCjB,KAAKsB,gB,uBACLtB,KAAKoB,W,OACXC,YAAW,kBAAM,EAAKH,4BAA2B,K,4QAI5BK,EAAQ,CAC3BC,IAAK,kBACLC,OAAQ,Q,UAGY,KALlB5D,E,QAKSG,K,iDAGbgC,KAAKmB,SAAS,CACZd,WAAYxC,EAASN,O,+QAKFgE,EAAQ,CAC3BC,IAAK,YACLC,OAAQ,Q,UAEY,KAJlB5D,E,QAISG,K,iDAETT,EAAOM,EAASN,KACpByC,KAAKmB,SAAS,CACZb,QAAS/C,IAIPmE,EAAenE,EAAKoE,iBACpBC,EAAe5B,KAAKE,MAAMQ,oBAE1BmB,EAAaH,IAAiBE,GAAiC,IAAjBA,EAClDxD,QAAQC,IAAIwD,GACZ7B,KAAKmB,SAAS,CACZT,oBAAqBgB,EACrBf,iBAAkBkB,EAClBjB,4BAA2BiB,GAAoB7B,KAAKE,MAAMU,4B,iLAI7CkB,G,8EACTC,EAAO5D,IAAQ6D,QAAQ,6BAAU,GACvChC,KAAKmB,SAAS,CAAEN,WAAW,I,SACrBU,EAAQ,CACZC,IAAK,eACLC,OAAQ,OACRlE,KAAM,CACJ0E,GAAIH,K,uBAGF,IAAII,SAAQ,SAAUC,EAASC,GACnCf,WAAWc,EAAS,Q,uBAEhBnC,KAAKoB,W,OACXW,IACA/B,KAAKmB,SAAS,CAAEN,WAAW,I,qQAIrBkB,EAAO5D,IAAQ6D,QAAQ,yCAAY,GACzChC,KAAKmB,SAAS,CAAEN,WAAW,I,SACrBU,EAAQ,CACZC,IAAK,kBACLC,OAAQ,S,uBAEJzB,KAAKoB,W,OACXW,IACA/B,KAAKmB,SAAS,CAAEN,WAAW,I,oLAGRiB,G,2EACf9B,KAAKzC,KAAKwD,U,wDAGdf,KAAKzC,KAAKwD,WAAY,EAChBgB,EAAO5D,IAAQ6D,QAAQ,6BAAU,G,SACjCT,EAAQ,CACZC,IAAK,iBACLC,OAAQ,OACRlE,KAAM,CACJ0E,GAAIH,K,uBAGF9B,KAAKsB,gB,OACXS,IACA/B,KAAKzC,KAAKwD,WAAY,E,mLAGNsB,EAAMC,G,iFAChBf,EAAQ,CACZC,IAAK,cACLC,OAAQ,OACRlE,KAAM,CACJ8E,OACAC,U,uBAGEtC,KAAKsB,gB,wIAIH,IAAD,OACP,OAA0B,IAAtBtB,KAAKE,MAAMC,OACN,8BAGP,yBAAKoC,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,UACd,kBAAC,IAAD,CAAKC,OAAQ,CAAC,EAAG,IACf,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMH,UAAU,cAAcI,UAAW,CAAEC,OAAQ,SAChD5C,KAAKE,MAAMI,QAAQC,OAElB,yBAAKgC,UAAU,OACb,kBAAC,IAAD,CAAOM,OAAO,YACd,mDACA,yBAAKC,MAAO,CAAEC,MAAO,UACrB,kBAAC,IAAD,CAAQC,KAAK,UAAUC,KAAK,QAAQC,QAAM,EACxCC,SAAUnD,KAAKE,MAAMW,UACrBuC,QAAS,SAAAC,GAAC,OAAI,EAAKC,kBAFrB,6BAMF,yBAAKf,UAAU,OACb,kBAAC,IAAD,CAAOM,OAAO,UACd,sDAKR,kBAAC,IAAD,CAAKJ,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMH,UAAU,cAAcI,UAAW,CAAEC,OAAQ,SAChD5C,KAAKE,MAAMI,QAAQG,OAClB,yBAAK8B,UAAU,iBACb,6BAAK,0BAAMA,UAAU,UAAhB,iBAAL,IAA0CvC,KAAKE,MAAMI,QAAQG,OAAO6B,MACpE,6BAAK,0BAAMC,UAAU,UAAhB,iBAAL,IAA0CvC,KAAKE,MAAMI,QAAQG,OAAO4B,MACpE,6BAAK,0BAAME,UAAU,UAAhB,iBAAL,IAA0CvC,KAAKE,MAAMI,QAAQG,OAAO8C,OAApE,UACA,6BAAK,0BAAMhB,UAAU,UAAhB,iBAAL,IAA0CvC,KAAKE,MAAMI,QAAQG,OAAO+C,KAApE,kBAGF,yBAAKjB,UAAU,iBACb,6BAAK,0BAAMA,UAAU,UAAhB,iBAAL,OACA,6BAAK,0BAAMA,UAAU,UAAhB,iBAAL,OACA,6BAAK,0BAAMA,UAAU,UAAhB,iBAAL,OACA,6BAAK,0BAAMA,UAAU,UAAhB,iBAAL,UAKR,kBAAC,IAAD,CAAKE,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMH,UAAU,cAAcI,UAAW,CAAEC,OAAQ,SAEjD,yBAAKL,UAAU,aACb,kBAACkB,EAAA,EAAD,CAAgBX,MAAO,CAAEY,SAAU,UAEnC,kBAAC,IAAD,CACEnB,UAAU,2BACVoB,UAAW,CACT,CAAEC,EAAG,GACL,CAAEA,GAAI,KACN,CAAEA,EAAG,KACL,CACEA,EAAG,EAAGC,WAAY,SAACR,GACjB,EAAKlC,SAAS,CACZP,0BAA2B,EAAKV,MAAMS,sBAK9CmD,QAAS,EACTC,QAAS/D,KAAKE,MAAMU,2BAEpB,kBAACoD,EAAA,EAAD,CAAclB,MAAO,CAAEY,SAAU,WAGnC,kBAACO,EAAA,EAAD,CAAwBnB,MAAO,CAAEY,SAAU,eAOrD,kBAAC,IAAD,CAAMnB,UAAU,WACd,kBAAC,IAAD,CAAQS,KAAK,SAASkB,OAAK,EAACd,QAAS,SAAAC,GACnC,EAAKlC,SAAS,CAAEf,gBAAgB,MADlC,kCAICJ,KAAKE,MAAMG,WAAWX,OAAS,GAAK,yBAAKoD,MAAO,CAAEF,OAAQ,UAC1D5C,KAAKE,MAAMG,WAAW8D,KAAI,SAAAC,GAAC,OAC1B,yBAAK7B,UAAU,mBAAmB8B,IAAKD,EAAEnC,IACvC,yBAAKM,UAAU,aACb,yBAAKO,MAAO,CAAEwB,WAAY,EAAGC,SAAU,EAAGxB,MAAO,SAC/C,yBAAKR,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoE6B,EAAE9B,MACtE,yBAAKC,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoE6B,EAAE/B,MACtE,yBAAKE,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoE6B,EAAEb,OAAtE,WACA,yBAAKhB,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoE6B,EAAEZ,KAAtE,iBACA,yBAAKjB,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoE6B,EAAEI,QAAtE,KACA,yBAAKjC,UAAU,iBAAgB,0BAAMA,UAAU,UAAhB,iBAA/B,IAAoEkC,EAAM5E,gBAAgBuE,EAAEzC,kBAA5F,KACA,yBAAKmB,MAAO,CAAEF,OAAQ,UACtB,kBAAC,IAAD,CAAQI,KAAK,UAAUC,KAAK,QAC1BH,MAAO,CAAEwB,WAAY,EAAGC,SAAU,GAClCpB,SAAU,EAAKjD,MAAMW,WAAa,EAAKX,MAAMI,QAAQC,OACrD6C,QAAS,SAAAC,GAAC,OAAI,EAAKqB,WAAWN,EAAEnC,MAHlC,gBAKA,sDACA,kBAAC,IAAD,CAAQe,KAAK,UAAUC,KAAK,QAAQC,QAAM,EACxCJ,MAAO,CAAEwB,WAAY,EAAGC,SAAU,GAClCnB,QAAS,SAAAC,GAAC,OAAI,EAAKsB,eAAeP,EAAEnC,MAFtC,kBAQJ,kBAAC,IAAD,WAKN,kBAAC,IAAD,CACE2C,MAAM,iCACNC,QAAS7E,KAAKE,MAAME,eACpB0E,UAAU,EACVC,OAAQ,KACRC,UAAU,GAEV,kBAAC,IAAD,CACEC,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,IACpBE,OAAO,WACPC,SAAQ,uCAAE,WAAM9H,GAAN,SAAA+H,EAAA,6DACR,EAAKnE,SAAS,CAAEL,iBAAiB,IADzB,SAEF,EAAKyE,YAAYhI,EAAK8E,KAAM9E,EAAK+E,MAF/B,OAGR,EAAKnB,SAAS,CAAEL,iBAAiB,IACjC,EAAKK,SAAS,CAAEf,gBAAgB,IAJxB,2CAAF,uDAOR,kBAAC,IAAKoF,KAAN,CACEC,MAAM,eACNnD,KAAK,OACLoD,MAAO,CAAC,CAAEC,UAAU,EAAMxH,QAAS,qDACnC2E,MAAO,CAAE8C,aAAc,QAEvB,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,eACNnD,KAAK,OACLoD,MAAO,CAAC,CAAEC,UAAU,IACpB7C,MAAO,CAAE8C,aAAc,QAEvB,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACE1C,MAAO,CAAE+C,OAAQ,aAEjB,kBAAC,IAAD,CAAQ7C,KAAK,UAAU8C,SAAS,SAAS5B,OAAK,EAACf,SAAUnD,KAAKE,MAAMY,iBAApE,gBACA,yBAAKgC,MAAO,CAAEF,OAAQ,SACtB,kBAAC,IAAD,CAAQI,KAAK,SAAS8C,SAAS,SAAS5B,OAAK,EAACd,QAAS,SAAAC,GACrD,EAAKlC,SAAS,CAAEf,gBAAgB,MADlC,wB,GA7SI2F,IAAMC,WCLJC,QACW,cAA7BC,OAAOhJ,SAASiJ,UAEe,UAA7BD,OAAOhJ,SAASiJ,UAEhBD,OAAOhJ,SAASiJ,SAASC,MACvB,2D,2BCVNC,EAAOC,OAAO,SAEdC,IAASC,OACP,kBAAC,EAAD,MACAvJ,SAASwJ,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9I,GACLE,QAAQF,MAAMA,EAAMC,c","file":"static/js/main.73a40ef8.chunk.js","sourcesContent":["import axios from 'axios'\nimport { notification } from 'antd';\n// import Preset from '../../public/preset.js'\nimport Qs from 'qs'\n\nconst service = axios.create({\n  baseURL: document.location.origin,\n  // baseURL: 'http://127.0.0.1:5000/',\n  timeout: 120 * 1000,\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  },\n  transformRequest: [(data, header) => {\n    const contentType = header['Content-Type']\n    if (contentType.startsWith('multipart/form-data')) {\n      return data\n    }\n    return Qs.stringify(data)\n  }]\n})\n\n\nservice.interceptors.response.use(\n  response => {\n    const { data, data: { msg } } = response\n\n    if (data.code !== 1) {\n      notification.error({\n        message: msg,\n      });\n      console.log(msg);\n    }\n\n    return data\n  },\n  error => {\n    const { message, response } = error;\n    notification.error({\n      message: message,\n    });\n    return {\n      code: -2,\n      data: response?.data,\n      msg: message ?? '网络错误'\n    }\n  }\n)\n\n\nexport default service\n","\nexport default {\n  formatTime,\n  formatRoughTime\n}\n\nfunction formatTime(timestamp, fmt) {\n  var date = new Date(timestamp * 1000);\n  var o = {\n    'M+': date.getMonth() + 1, //月份     \n    'd+': date.getDate(), //日     \n    'h+': date.getHours() % 12 === 0 ? 12 : date.getHours() % 12, //小时     \n    'H+': date.getHours(), //小时     \n    'm+': date.getMinutes(), //分     \n    's+': date.getSeconds(), //秒     \n    'q+': Math.floor((date.getMonth() + 3) / 3), //季度     \n    'S': date.getMilliseconds() //毫秒   \n  };\n  var week = {\n    '0': '日',\n    '1': '一',\n    '2': '二',\n    '3': '三',\n    '4': '四',\n    '5': '五',\n    '6': '六'\n  };\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n  if (/(E+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? '星期' : '周') : '') + week[date.getDay() + '']);\n  }\n  for (var k in o) {\n    if (new RegExp('(' + k + ')').test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));\n    }\n  }\n  return fmt;\n}\n\nfunction formatRoughTime(timestamp) {\n  let date = new Date(timestamp * 1000);\n  let nowDate = new Date();\n  if (date.setHours(0, 0, 0, 0) === nowDate.setHours(0, 0, 0, 0)) {\n    return this.formatTime(timestamp, 'HH:mm');\n  }\n  else {\n    return this.formatTime(timestamp, 'yyyy-MM-dd');\n  }\n\n\n}","import './App.scss';\nimport React from 'react';\nimport request from './utils/request'\nimport utils from './utils/utils'\n\nimport 'antd/dist/antd.css';\nimport {\n  Card, Row, Col, Badge, Divider, Button, Modal, Form, Input, message\n} from 'antd';\nimport TweenOne from 'rc-tween-one';\n\nimport {\n  MobileOutlined,\n  LineOutlined,\n  DeploymentUnitOutlined\n} from '@ant-design/icons';\n\nclass App extends React.Component {\n\n  state = {\n    loaded: false,\n    newServerModal: false,\n    serverList: [],\n    lanInfo: {\n      runing: false,\n      address: '',\n      \"update_timestamp\": 0,\n      server: null\n    },\n    lastUpdateTimestamp: 0,\n    lanActionBreathe: false,\n    lanActionBreatheAnimation: false,\n    actioning: false,\n    addLanServering: false,\n  };\n\n  data = {\n    removeing: false,\n\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  async loadData() {\n    await this.schedulerRefreshInfo();\n    await this.schedulerRefreshServers();\n    this.setState({ loaded: true })\n  }\n\n  async schedulerRefreshInfo() {\n    await this.loadInfo();\n    setTimeout(() => this.schedulerRefreshInfo(), 5 * 1000);\n  }\n  async schedulerRefreshServers() {\n    await this.refreListData();\n    await this.loadInfo();\n    setTimeout(() => this.schedulerRefreshServers(), 60 * 1000);\n  }\n\n  async refreListData() {\n    let response = await request({\n      url: '/server/refresh',\n      method: 'GET',\n    });\n\n    if (response.code !== 1)\n      return;\n\n    this.setState({\n      serverList: response.data\n    })\n  }\n\n  async loadInfo() {\n    let response = await request({\n      url: '/lan/info',\n      method: 'GET',\n    });\n    if (response.code !== 1) return;\n\n    let data = response.data;\n    this.setState({\n      lanInfo: data,\n    })\n\n    // this.checkLanBreathe();\n    let newTimestamp = data.update_timestamp;\n    let oldTimestamp = this.state.lastUpdateTimestamp;\n\n    let difference = newTimestamp !== oldTimestamp && oldTimestamp !== 0;\n    console.log(difference);\n    this.setState({\n      lastUpdateTimestamp: newTimestamp,\n      lanActionBreathe: difference,\n      lanActionBreatheAnimation: difference ? true : this.state.lanActionBreatheAnimation\n    })\n  }\n\n  async connectLan(serverID) {\n    const hide = message.loading('正在连接..', 0);\n    this.setState({ actioning: true })\n    await request({\n      url: '/lan/connect',\n      method: 'POST',\n      data: {\n        id: serverID,\n      }\n    });\n    await new Promise(function (resolve, reject) {\n      setTimeout(resolve, 1000);\n    });\n    await this.loadInfo();\n    hide();\n    this.setState({ actioning: false })\n  }\n\n  async disconnectLan() {\n    const hide = message.loading('正在断开连接..', 0);\n    this.setState({ actioning: true })\n    await request({\n      url: '/lan/disconnect',\n      method: 'POST',\n    });\n    await this.loadInfo();\n    hide();\n    this.setState({ actioning: false })\n  }\n\n  async deleteLanServe(serverID) {\n    if (this.data.removeing) {\n      return;\n    }\n    this.data.removeing = true;\n    const hide = message.loading('正在删除..', 0);\n    await request({\n      url: '/server/remove',\n      method: 'POST',\n      data: {\n        id: serverID,\n      }\n    });\n    await this.refreListData();\n    hide();\n    this.data.removeing = false;\n  }\n\n  async addLanServe(host, name) {\n    await request({\n      url: '/server/add',\n      method: 'POST',\n      data: {\n        host,\n        name\n      }\n    });\n    await this.refreListData();\n  }\n\n\n  render() {\n    if (this.state.loaded === false) {\n      return <div />\n    }\n    return (\n      <div className=\"contianer\">\n        <Card className=\"header\">\n          <Row gutter={[8, 8]}>\n            <Col xs={24} lg={8}>\n              <Card className=\"header-card\" bodyStyle={{ height: '100%' }}>\n                {this.state.lanInfo.runing\n                  ?\n                  <div className=\"row\">\n                    <Badge status=\"success\" />\n                    <div>已连接</div>\n                    <div style={{ width: '10px' }} />\n                    <Button type=\"primary\" size=\"small\" danger\n                      disabled={this.state.actioning}\n                      onClick={e => this.disconnectLan()}\n                    >断开连接</Button>\n                  </div>\n                  :\n                  <div className=\"row\">\n                    <Badge status=\"error\" />\n                    <div>未连接</div>\n                  </div>\n                }\n              </Card>\n            </Col>\n            <Col xs={24} lg={8}>\n              <Card className=\"header-card\" bodyStyle={{ height: '100%' }}>\n                {this.state.lanInfo.server ?\n                  <div className=\"column-center\">\n                    <div><span className=\"strong\">名称:</span> {this.state.lanInfo.server.name}</div>\n                    <div><span className=\"strong\">地址:</span> {this.state.lanInfo.server.host}</div>\n                    <div><span className=\"strong\">在线:</span> {this.state.lanInfo.server.online}人</div>\n                    <div><span className=\"strong\">延迟:</span> {this.state.lanInfo.server.ping} 毫秒</div>\n                  </div>\n                  :\n                  <div className=\"column-center\">\n                    <div><span className=\"strong\">名称:</span> - </div>\n                    <div><span className=\"strong\">地址:</span> - </div>\n                    <div><span className=\"strong\">在线:</span> - </div>\n                    <div><span className=\"strong\">延迟:</span> - </div>\n                  </div>\n                }\n              </Card>\n            </Col>\n            <Col xs={24} lg={8}>\n              <Card className=\"header-card\" bodyStyle={{ height: '100%' }}>\n\n                <div className=\"row-space\">\n                  <MobileOutlined style={{ fontSize: '30px' }} />\n                  {/* <div className=\"lan-info-board\"> */}\n                  <TweenOne\n                    className=\"lan-info-board-indicator\"\n                    animation={[\n                      { x: 0 },\n                      { x: -100 },\n                      { x: 100 },\n                      {\n                        x: 0, onComplete: (e) => {\n                          this.setState({\n                            lanActionBreatheAnimation: this.state.lanActionBreathe\n                          })\n                        }\n                      },\n                    ]}\n                    repeat={-1}\n                    paused={!this.state.lanActionBreatheAnimation}\n                  >\n                    <LineOutlined style={{ fontSize: '30px' }} />\n                  </TweenOne>\n                  {/* </div> */}\n                  <DeploymentUnitOutlined style={{ fontSize: '30px' }} />\n                </div>\n              </Card>\n            </Col>\n          </Row>\n        </Card >\n\n        <Card className=\"content\">\n          <Button type=\"dashed\" block onClick={e => {\n            this.setState({ newServerModal: true });\n          }}>添加服务器</Button>\n\n          {this.state.serverList.length > 0 && <div style={{ height: '20px' }}></div>}\n          {this.state.serverList.map(v =>\n            <div className=\"server-list-item\" key={v.id}>\n              <div className=\"row-space\" >\n                <div style={{ flexShrink: 1, flexGrow: 1, width: \"100%\" }}>\n                  <div className=\"text-overflow\"><span className=\"strong\">名称:</span> {v.name}</div>\n                  <div className=\"text-overflow\"><span className=\"strong\">地址:</span> {v.host}</div>\n                  <div className=\"text-overflow\"><span className=\"strong\">在线:</span> {v.online} 人</div>\n                  <div className=\"text-overflow\"><span className=\"strong\">延迟:</span> {v.ping} 毫秒</div>\n                  <div className=\"text-overflow\"><span className=\"strong\">版本:</span> {v.version} </div>\n                  <div className=\"text-overflow\"><span className=\"strong\">更新:</span> {utils.formatRoughTime(v.update_timestamp)} </div>\n                  <div style={{ height: '10px' }} />\n                  <Button type=\"primary\" size=\"small\"\n                    style={{ flexShrink: 0, flexGrow: 0 }}\n                    disabled={this.state.actioning || this.state.lanInfo.runing}\n                    onClick={e => this.connectLan(v.id)}\n                  >连接</Button>\n                  <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                  <Button type=\"primary\" size=\"small\" danger\n                    style={{ flexShrink: 0, flexGrow: 0 }}\n                    onClick={e => this.deleteLanServe(v.id)}\n                  >删除</Button>\n                </div>\n\n\n              </div>\n              <Divider />\n            </div>)}\n\n        </Card>\n\n        <Modal\n          title=\"添加服务器\"\n          visible={this.state.newServerModal}\n          centered={true}\n          footer={null}\n          closable={false}\n        >\n          <Form\n            labelCol={{ span: 24 }}\n            wrapperCol={{ span: 24 }}\n            layout=\"vertical\"\n            onFinish={async data => {\n              this.setState({ addLanServering: true });\n              await this.addLanServe(data.host, data.name)\n              this.setState({ addLanServering: false });\n              this.setState({ newServerModal: false });\n            }}\n          >\n            <Form.Item\n              label=\"地址\"\n              name=\"host\"\n              rules={[{ required: true, message: \"请填写服务器地址\" }]}\n              style={{ marginBottom: '2px' }}\n            >\n              <Input />\n            </Form.Item>\n            <Form.Item\n              label=\"名称\"\n              name=\"name\"\n              rules={[{ required: false }]}\n              style={{ marginBottom: '2px' }}\n            >\n              <Input />\n            </Form.Item>\n\n            <Form.Item\n              style={{ margin: '32px 0 0' }}\n            >\n              <Button type=\"primary\" htmlType=\"submit\" block disabled={this.state.addLanServering}>确定</Button>\n              <div style={{ height: '8px' }} />\n              <Button type=\"dashed\" htmlType=\"button\" block onClick={e => {\n                this.setState({ newServerModal: false });\n              }}>取消</Button>\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'moment/locale/zh-cn';\nimport moment from 'moment';\nmoment.locale('zh-cn');\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}